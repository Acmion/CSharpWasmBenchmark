@page
@using Benchmarking.Core

<h1 class="scroll-anchor" id="home">
    CSharpWasmBenchmark - Results
</h1>

<p>
    CSharpWasmBenchmark is a project that benchmarks the performance of C# when compiled to Webassembly.
    The rationale behind this analysis is to find out whether it is viable to run performance critical applications
    written in C# in the browser and how the browser performance differs from "native" performance.
</p>
<p>
    The performance of the following are measured: C# Runtime, C# Wasm AOT Blazor, C# Wasm Interpreted Blazor, C Wasm
    and JavaScript. This C# code has been compiled with .NET 7.
</p>
<p>
    Improvements can probably be expected to C# Wasm in the future.
</p>
<p>
    The JavaScript code is directly translated (as well as possible) from the C# source code,
    which may create certain differences between the implications of the code that is executed. You should
    always compare the source codes! The comparison between the performance of different C# execution targets
    are likely more reliable than that of comparison with JavaScript. JavaScript was included in this analysis
    since currently it is the standard frontend development programming language.
</p>

<p>
    <strong>Note:</strong> The benchmarks may have errors in them and the source codes may 
    not be equivalent. However, the C# code is always executed from the same source and should thus be comparable. 
    Additionally, since C# Wasm AOT and Wasm itself are still somewhat experimental technologies, these results may not reflect 
    the performance of the finalized product. 
</p>
<p>
    Unfortunately Blazor Wasm threw some memory error for larger parameter values. I do not currently have the time to investigate 
    this and as such I just decreased the magnitude of the parameters. Note that the executed code is just the same for 
    C# runtime and both C# Blazor variants.
</p>

<section>
    <h2 class="scroll-anchor" id="conclusions">
        Conclusions
    </h2>

    <style>
        #conclusions-table td:nth-child(2),
        #conclusions-table td:nth-child(3),
        #conclusions-table th:nth-child(2),
        #conclusions-table th:nth-child(3) 
        { 
            text-align: end; 
        }
    </style>

    <table class="table" id="conclusions-table" style="border: 1px solid #dee2e6">
        <thead>
            <tr>
                <th>
                    Platform
                </th>
                <th>
                    Total Time Spent in Benchmarks (ms)
                </th>
                <th>
                    Relative Performance
                </th>
            </tr>
        </thead>
        <tbody id="conclusions-table-body">
            <tr><td>Loading...</td></tr>
        </tbody>
    </table>
    <p>
        <strong>Table 1:</strong> The total time spent in all the benchmarks. 
        This data can be interpreted to give some sort of an average estimate of how well the different
        platforms perform. However, the performance depends on the parameter values. 
        See the figures below for a more detailed overview.
    </p>

    <p>
        The performance of C# AOT compiled to Webassembly is often significantly better than that of C# Wasm Interpreted.
        Table 1 shows the total time spent in benchmarking each platform. Running the benchmarks in C# Wasm AOT takes approximately 
        <strong>2.69x</strong> longer than in the C# runtime and running the benchmarks in C# Wasm Interpreted takes 
        approximately <strong>33.19x</strong> longer than in the C# runtime.
        These values are rough estimates and depend on parameter values. See more details in the figures below. 
    </p>

    <p>
        Generally the performance improvement of AOT in the featured benchmarks lies within the range <strong>2x - 5x</strong>, 
        but in some cases even a <strong>20x</strong> performance benefit can be seen. Strangely, for example, 
        sorting doubles seems to be slightly slower with AOT code.
    </p>

    <p>
        C# Runtime can in some cases perform over <strong>30x</strong> (even faster in certain cases) faster than C# Wasm AOT. However, the 
        performance is almost on par in some cases with C# Wasm AOT. Probably when no abstractions or framework calls
        are utilized. See for example the C# Wasm AOT performance difference between ArraySortInt (uses Array.Sort) and 
        ArraySortIntQuick (uses a custom quicksort implementation). The performance of ArraySortIntQuick in C# Wasm AOT is about 
        <strong>20x</strong> better than that of ArraySortInt, even if they, in practice, do the same work. 
        The performance difference between ArraySortInt and ArraySortIntQuick when executing under the C# Runtime is negligible.
    </p>

    <p>
        The equivalent code executed as JavaScript is generally faster than
        C# Wasm AOT. However, if the code avoids relying on framework methods and calls (for example
        ArraySortIntQuick, NewtonsMethodSecondDegree and NewtonsMethodThirdDegree) then the difference
        is almost negligible.
    </p>

    <p>
        Webassembly promises, more or less, that it can enable "native" performance within a browser. C# often
        runs within a virtual machine and can maybe thus not achieve the full potential of Wasm. However,
        the difference in performance between C# Runtime and C# Wasm AOT varies from benchmark to benchmark and
        does generally not live up to the promise of Webassembly. Even JS is often faster than C# Wasm AOT. 
        With the benchmarks and assumptions of this project the conclusion is that
        <strong>
            C# Wasm AOT still has a long way to become a general and performant client side web programming platform. 
            Hopefully this changes in the future.
        </strong>
    </p>
</section>


<section>
    <h2 class="scroll-anchor" id="credits">
        Credits
    </h2>

    <p>
        This analysis initially created by <a href="https://acmion.com">Acmion</a>.
    </p>
    <p>
        Contribute to CSharpWasmBenchmark in it's <a href="https://github.com/Acmion/CSharpWasmBenchmark">GitHub repository</a>.
        Consider leaving a like if you found this analysis useful, interesting or informative.
    </p>
    
    <p>
        Thanks to <a href="https://github.com/gabrielgt">gabrielgt</a> for his contributions in updating the project to .NET 7 and 
        the C Wasm implementation.
    </p>
    <p>
        Thanks to <a href="https://github.com/unoplatform/Uno.Wasm.Bootstrap">Uno.Wasm.Bootstrap</a>, a project that provides
        an understandable way of AOT compiling C# to Wasm that just works and has minimal dependencies. Uno.Wasm.Bootstrap is 
        no longer used in this benchmark, but for a long time it was used for C# Wasm AOT. 
    </p>
</section>


<section>
    <h2 class="scroll-anchor" id="benchmarking-strategy">
        Benchmarking Strategy
    </h2>

    <p>
        This section describes how the benchmarks are created and executed. All benchmarks are contained within some
        categories, for example, there is an <code>ArrayBenchmarks</code> and a <code>ListBenchmarks</code> category.
        BenchmarkDotNet was not utilized in this project, because I wanted to ensure that the C# and JavaScript code
        and benchmarks are doing the same things. Additionally, BenchmarkDotNet uses some complex compilation strategies,
        which may or may not work with C# Wasm AOT.
    </p>

    <section class="indent">
        <h3>
            C# Benchmarks
        </h3>
        <p>
            The source code of the C# benchmark executer can be found <a href="/Benchmarking/Core/BenchmarkRunner.cs">here</a>.
            The way a C# benchmark should be defined is:
        </p>
        <p>
            <ol>
                <li>
                    Create a C# class <code>SomeBenchmark</code>, which inherits from <code>Benchmark</code>.
                </li>
                <li>
                    Override some describing properties.
                </li>
                <li>
                    Override the <code>Parameters</code> property, which is of type <code>int[]</code>.
                    <code>SomeBenchmark</code> is initialized and executed with each of the values of <code>Parameters</code>.
                    This means that the performance of something can be evaulated with several parameter values. For example,
                    if <code>Parameters = new int[] { 1, 10, 100, 1000 }</code> and <code>SomeBenchmark</code> sorts a list
                    of numbers, then the analysis can be evaluated for a list of length 1, a list of length 10, a list of length
                    100 and a list of length 1000.
                </li>
                <li>
                    Override the <code>public void Initialize(int parameter)</code> method. The value of <code>parameter</code> is one
                    value from the <code>Parameters</code> array. This method is used to initialize stuff needed for the
                    benchmark, but the performance is not evaluated.
                </li>
                <li>
                    Override the <code>public object Execute()</code> method. This method should execute the code that is to be
                    benchmarked. The method returns an <code>object</code>, which main purpose should be to ensure that the compiler
                    does not remove the code within the method. The performance of this method is evaluated.
                </li>
                <li>
                    Register <code>SomeBenchmark</code> under a <code>BenchmarkCategory</code> in <code>Benchmarking/Core/BenchmarkCategory.cs</code>.
                    Note that you may need to define an extra category.
                </li>
            </ol>
        </p>
    </section>

    <section class="indent">
        <h3>
            JavaScript Benchmarks
        </h3>
        <p>
            The source code of the JS benchmark executer can be found <a href="/Benchmarking/JavaScriptCore/BenchmarkRunner.js">here</a>.
            The way a JS benchmark should be defined is:
        </p>

        <p>
            <ol>
                <li>
                    Create a JavaScript class <code>SomeBenchmark</code>. Note that the class name should be the same
                    as the C# class name.
                </li>
                <li>
                    No need to override describing properties. The values from C# are dynamically injected wherever needed.
                </li>
                <li>
                    No need to define a <code>Parameters</code> array. The value from C# is dynamically injected wherever needed.
                </li>
                <li>
                    Define the <code>function Initialize(parameter)</code> function. The behavior should be the same as the C# equivalent.
                    This performance is not evaluated.
                </li>
                <li>
                    Define the <code>function Execute()</code> function. The behavior should be the same as the C# equivalent.
                    This performance is evaluated.
                </li>
                <li>
                    No need to register this class anywhere. It is dynamically injected wherever needed.
                </li>
            </ol>
        </p>
    </section>

    <section class="indent">
        <h3>
            Benchmark Plots
        </h3>
        <p>
            Each benchmark is executed a certain number of times for each parameter value. The mean execution times of these runs
            represent data points, while the standard deviations represent error bars.
        </p>
    </section>
</section>

<section>
    <h2 class="scroll-anchor" id="benchmarks">
        Benchmarks
    </h2>

    <div class="indent">
        <p>
            The benchmarks.
        </p>
        @foreach (var bc in BenchmarkCategory.All)
        {
            <BenchmarkCategoryVisualizer BenchmarkCategory="bc" Interactive="false" />
        }
    </div>
</section>

<section id="static-content-helpers">
    <h2>
        Static Content Helpers
    </h2>

    <p>
        You can ignore this section. Just some helpers for creating the static website. 
    </p>

    <button onclick="copyHtml()">
        Copy HTML
    </button>
</section>

<script>
    var csRuntimeName = "CS Runtime";
    var csWasmAotName = "CS Wasm AOT";
    var csWasmInterpretedName = "CS Wasm Interpreted";
    var jsName = "JavaScript";
    var cWasmName = "C Wasm";

    var dataFileUrls = [ @(Html.Raw(string.Join(", ", Directory.GetFiles(Program.DataPath + "/", "*.*", SearchOption.AllDirectories).Select(f => $@"""{f.Replace("\\", "/").Replace(Program.RootPath, "")}""")))) ];

    async function plotData()
    {
        for (var dfu of dataFileUrls)
        {
            var url = encodeURI(dfu);
            url = url.replace(/#/g, '%23');

            var jsonData = await fetch(url).then(response => response.text());

            BenchmarkDataPlotter.plotBenchmarkCategoryDataFromJson(jsonData, getLegend(dfu));
        }
    }

    async function fillTable()
    {
        // Get the ElapsedMilliseconds of all benchmarks and report the relative performance on this page.

        var tbody = document.getElementById("conclusions-table-body");

        var csRuntimeElapsedMs = [];
        var csWasmAotElapsedMs = [];
        var csWasmInterpretedElapsedMs = [];
        var jsElapsedMs = [];
        var cWasmElapsedMs = [];

        var csRuntimeTot = 0.0;
        var csWasmAotTot = 0.0;
        var csWasmInterpretedTot = 0.0;
        var jsTot = 0.0;
        var cWasmTot = 0.0;

        for (var dfu of dataFileUrls)
        {
            var url = encodeURI(dfu);
            url = url.replace(/#/g, '%23');

            var jsonData = await fetch(url).then(response => response.text());
            var data = JSON.parse(jsonData)

            var mss = []
            var tot = 0.0
            for (var bid of data.BenchmarkInstanceData)
            {
                var ms = [];
                var maxParameterValue = 0;
                for (var dp of bid.DataPoints)
                {
                    ms.push(dp.ElapsedMilliseconds);

                    /*
                    if (dp.ParameterValue > maxParameterValue)
                    {
                        maxParameterValue = dp.ParameterValue;
                        ms = [dp.ElapsedMilliseconds];
                    }
                    else if (dp.ParameterValue == maxParameterValue)
                    {
                        ms.push(dp.ElapsedMilliseconds);
                    }
                    */
                }

                mss.push(ms)
                tot += ms.reduce((a, b) => a + b, 0.0)
            }

            if (url.includes("CS%20Runtime"))
            {
                csRuntimeElapsedMs.push(...mss)
                csRuntimeTot += tot
            }
            else if (url.includes("CS%20Wasm%20AOT"))
            {
                csWasmAotElapsedMs.push(...mss)
                csWasmAotTot += tot
            }
            else if (url.includes("CS%20Wasm%20Interpreted"))
            {
                csWasmInterpretedElapsedMs.push(...mss)
                csWasmInterpretedTot += tot
            }
            else if (url.includes("JavaScript"))
            {
                jsElapsedMs.push(...mss)
                jsTot += tot
            }
            else if (url.includes("C%20Wasm"))
            {
                cWasmElapsedMs.push(...mss)
                cWasmTot += tot
            }
        }

        tbody.innerHTML = ""
        tbody.innerHTML += `<tr><td>C# Runtime</td><td>${csRuntimeTot.toFixed(2)}</td><td>${(csRuntimeTot / csRuntimeTot).toFixed(2)}x</td></tr>`
        tbody.innerHTML += `<tr><td>C# Wasm AOT</td><td>${csWasmAotTot.toFixed(2)}</td><td>${(csWasmAotTot / csRuntimeTot).toFixed(2)}x</td></tr>`
        tbody.innerHTML += `<tr><td>C# Wasm Interpreted</td><td>${csWasmInterpretedTot.toFixed(2)}</td><td>${(csWasmInterpretedTot / csRuntimeTot).toFixed(2)}x</td></tr>`
        tbody.innerHTML += `<tr><td>JavaScript</td><td>${jsTot.toFixed(2)}</td><td>${(jsTot / csRuntimeTot).toFixed(2)}x</td></tr>`
        tbody.innerHTML += `<tr><td>C Wasm</td><td>${cWasmTot.toFixed(2)}</td><td>${(cWasmTot / csRuntimeTot).toFixed(2)}x</td></tr>`
    }

    function getLegend(url)
    {
        url = url.replace(".json", "");
        var spaceIndex = url.indexOf(" ");

        return url.substring(spaceIndex);
    }

    function copyHtml()
    {
        console.log("copy start")

        var headTemp = document.createElement("head");
        headTemp.innerHTML = document.head.innerHTML.replaceAll('src="/', 'src="/Source/CSharpWasmBenchmark/wwwroot/').replaceAll('href="/', 'href="/Source/CSharpWasmBenchmark/wwwroot/');

        var mainTemp = document.createElement("main");
        mainTemp.innerHTML = document.querySelector("body > main").innerHTML;

        for(var a of mainTemp.querySelectorAll(".source-code-url-anchor"))
        {
            a.href = "./Source/Implementations/" + a.getAttribute("href");
        }

        var plotlyElements = mainTemp.querySelectorAll(".js-plotly-plot");
        var staticContentHelperElement = mainTemp.querySelector("#static-content-helpers");

        for (var pe of plotlyElements)
        {
            pe.innerHTML = "";
        }

        staticContentHelperElement.style.display = "none";

        var header =
        `
            <header>
                <nav class="hn-menu hn-top hn-fixed hn-shadow">
                    <input type="checkbox" name="hn-top-state" class="hn-input-state hn-input-state-nav hn-hide-desktop" id="hn-nav-cb">

                    <div class="hn-nav container-md p-0">
                        <div class="hn-section hn-section-brand">
                            <div class="hn-item">
                                <a id="hn-logo" class="hn-link" href="/">
                                    <span class="hn-content">
                                        <span class="acmion-logo" style="font-weight: 600;">
                                            CSharpWasmBenchmark
                                        </span>
                                    </span>
                                </a>
                            </div>

                            <div class="hn-spacer"></div>

                            <label class="hn-item hn-input hn-input-nav hn-hide-desktop" for="hn-nav-cb">
                                <span class="hn-link">
                                    <span class="hn-content">
                                        <span class="hn-input-active ">
                                            <i class="ri-close-line"></i>
                                        </span>
                                        <span class="hn-input-default">
                                            <i class="ri-menu-line"></i>
                                        </span>
                                    </span>
                                </span>
                            </label>

                        </div>
                        <div class="hn-section hn-section-body">
                            <div class="hn-spacer"></div>

                            <div class="hn-item">
                                <a class="hn-link" href="#home">
                                    <span class="hn-content">
                                        Home
                                    </span>
                                </a>
                            </div>
                            <div class="hn-item">
                                <a class="hn-link" href="#conclusions">
                                    <span class="hn-content">
                                        Conclusions
                                    </span>
                                </a>
                            </div>
                            <div class="hn-item">
                                <a class="hn-link" href="#credits">
                                    <span class="hn-content">
                                        Credits
                                    </span>
                                </a>
                            </div>
                            <div class="hn-item">
                                <a class="hn-link" href="#benchmarking-strategy">
                                    <span class="hn-content">
                                        Benchmarking Strategy
                                    </span>
                                </a>
                            </div>
                            <div class="hn-item">
                                <a class="hn-link" href="#benchmarks">
                                    <span class="hn-content">
                                        Benchmarks
                                    </span>
                                </a>
                            </div>
                            <div class="hn-item">
                                <a class="hn-link" href="https://github.com/Acmion/CSharpWasmBenchmark">
                                    <span class="hn-content">
                                        GitHub
                                    </span>
                                </a>
                            </div>
                        </div>
                    </div>

                    <label class="hn-overlay" for="hn-nav-cb">
                    </label>
                </nav>
            </header>

            <div class="scroll-anchor-height"></div>
        `;

        var textArea = document.createElement('textarea');
        textArea.innerHTML = `<!DOCTYPE html><html><head>${headTemp.innerHTML}</head><body>${header}<main class="container">${mainTemp.innerHTML}</main><div style="height: 200px"></div></body></html>`;
        navigator.clipboard.writeText(textArea.value);

        console.log("copy end")
    }

    fillTable()
    plotData();
</script>

