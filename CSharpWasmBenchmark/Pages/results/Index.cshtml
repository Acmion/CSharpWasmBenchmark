@page

<h1 class="scroll-anchor" id="home">
    CSharpWasmBenchmark - Results
</h1>

<p>
    CSharpWasmBenchmark is a project that benchmarks the performance of C# when compiled to Webassembly.
    The rationale behind this analysis is to find out whether it is viable to run performance critical applications
    written in C# in the browser and how the browser performance differs from "native" performance.
</p>
<p>
    The performance of the following are measured: C# Runtime, C# Wasm AOT, C# Wasm Interpreted
    and JavaScript. 
</p>
<p>
    The C# Wasm compilation is handled by Uno.Wasm.Bootstrap, which is using .NET 6
    preview technology. However, this may have some implications on the performance. 
    .NET Blazor Interpreted gave runtime memory errors and Blazor AOT is not yet implemented. 
    However, a limited comparison between Uno Interpreted and Blazor Interpreted is contained
    for some of the benchmakrs (prefixed with "Uno vs Blazor" in the plots). Generally, Uno is 
    <strong>2x</strong> faster than Blazor, but in some benchmarks the performance is the same.
</p>
<p>
    The JavaScript code is directly translated (as well as possible) from the C# source code,
    which may create certain differences between the implications of the code that is executed. You should
    always compare the source codes! The comparison between the performance of different C# execution targets
    are likely more reliable than that of comparison with JavaScript. JavaScript was included in this analysis
    since currently it is the standard frontend development programming language.
</p>

<p>
    <strong>Note:</strong> The benchmarks may have errors in them, the C# Wasm compilation may depend on
    stuff that is no longer considered best practice, the tools used in C# Wasm compilation may not be
    updated to their newest and best versions and the C# and JavaScript source codes may not be equivalent.
    Additionally, since C# Wasm is still a somewhat experimental technology these results may not reflect the
    performance of the finalized product. 
</p>


<section>
    <h2 class="scroll-anchor" id="conclusions">
        Conclusions
    </h2>
    <p>
        The performance of C# AOT compiled to Webassembly is significantly better than that of C# Wasm Interpreted.
        Generally the improvement in the featured benchmarks lies within the range <strong>2x - 5x</strong> better
        performance, but in some cases even a <strong>50x</strong> performance benefit can be seen.
    </p>

    <p>
        C# Runtime can in some cases perform over <strong>100x</strong> faster than C# Wasm AOT and generally the
        performance benefit of C# Runtime is about <strong>10x</strong>. However, the performance is almost on par
        with C# Wasm AOT when no abstractions or framework calls are utilized. See for example the C# Wasm AOT
        performance difference between ArraySortInt (uses Array.Sort) and ArraySortIntQuick (uses a custom quicksort
        implementation). The performance of ArraySortIntQuick is about <strong>20x</strong> better than that of
        ArraySortInt, even if they, in practice, do the same work. The performance difference between ArraySortInt
        and ArraySortIntQuick when executing under the C# Runtime is negligible.
    </p>

    <p>
        The equivalent code executed as JavaScript is generally <strong>3x - 10x</strong> faster than
        C# Wasm AOT. However, if the code avoids relying on framework methods and calls (for example
        ArraySortIntQuick, NewtonsMethodSecondDegree and NewtonsMethodThirdDegree) then the difference
        is almost negligible.
    </p>

    <p>
        The C# code was compiled with Uno.Wasm.Bootstrap, which uses .NET 6 preview tech. Uno Wasm interpreted is 
        at best approximately <strong>2x</strong> faster than Blazor interpreted in the test which were performed.
        In some cases the performance is the same. However,
        Blazor interpreted gave runtime memory errors and as such the validity of this conclusion is quite uncertain.
        Regardless, we can with some certainty say that the results of this analysis reflect the performance of Blazor
        to some extent.
    </p>

    <p>
        Webassembly promises, more or less, that it can enable "native" performance within a browser. C# often
        runs within a virtual machine and can maybe thus not achieve the full potential of Wasm. However,
        the difference in performance between C# Runtime and C# Wasm AOT varies from benchmark to benchmark and
        does generally not live up to the promise of Webassembly. With the benchmarks and assumptions of this project
        the conclusion is that
        <strong>
            C# Wasm AOT (at least when compiled with Uno.Wasm.Bootstrap) still has a long way to become a general and 
            performant client side web programming platform. Note: The usage of the Uno.Wasm.Bootstrap toolchain may have 
            affected the performance of some of the benchmarks. Thus, this analysis should not be regarded as a benchmark 
            of the finalized product.
        </strong>
        Hopefully this changes in the future.
    </p>
</section>


<section>
    <h2 class="scroll-anchor" id="credits">
        Credits
    </h2>

    <p>
        This analysis was created by <a href="https://acmion.com">Acmion</a>.
    </p>
    <p>
        Contribute to CSharpWasmBenchmark in it's <a href="https://github.com/Acmion/CSharpWasmBenchmark">GitHub repository</a>.
        Consider leaving a like if you found this analysis useful, interesting or informative.
    </p>
    <p>
        Thanks to <a href="https://github.com/unoplatform/Uno.Wasm.Bootstrap">Uno.Wasm.Bootstrap</a>, a project that provides
        an understandable way of AOT compiling C# to Wasm that just works and has minimal dependencies.
    </p>
</section>


<section>
    <h2 class="scroll-anchor" id="benchmarking-strategy">
        Benchmarking Strategy
    </h2>

    <p>
        This section describes how the benchmarks are created and executed. All benchmarks are contained within some
        categories, for example, there is an <code>ArrayBenchmarks</code> and a <code>ListBenchmarks</code> category.
        BenchmarkDotNet was not utilized in this project, because I wanted to ensure that the C# and JavaScript code
        and benchmarks are doing the same things. Additionally, BenchmarkDotNet uses some complex compilation strategies,
        which may or may not work with C# Wasm AOT.
    </p>

    <section class="indent">
        <h3>
            C# Benchmarks
        </h3>
        <p>
            The source code of the C# benchmark executer can be found <a href="/Benchmarking/Core/BenchmarkRunner.cs">here</a>.
            The way a C# benchmark should be defined is:
        </p>
        <p>
            <ol>
                <li>
                    Create a C# class <code>SomeBenchmark</code>, which inherits from <code>Benchmark</code>.
                </li>
                <li>
                    Override some describing properties.
                </li>
                <li>
                    Override the <code>Parameters</code> property, which is of type <code>int[]</code>.
                    <code>SomeBenchmark</code> is initialized and executed with each of the values of <code>Parameters</code>.
                    This means that the performance of something can be evaulated with several parameter values. For example,
                    if <code>Parameters = new int[] { 1, 10, 100, 1000 }</code> and <code>SomeBenchmark</code> sorts a list
                    of numbers, then the analysis can be evaluated for a list of length 1, a list of length 10, a list of length
                    100 and a list of length 1000.
                </li>
                <li>
                    Override the <code>public void Initialize(int parameter)</code> method. The value of <code>parameter</code> is one
                    value from the <code>Parameters</code> array. This method is used to initialize stuff needed for the
                    benchmark, but the performance is not evaluated.
                </li>
                <li>
                    Override the <code>public object Execute()</code> method. This method should execute the code that is to be
                    benchmarked. The method returns an <code>object</code>, which main purpose should be to ensure that the compiler
                    does not remove the code within the method. The performance of this method is evaluated.
                </li>
                <li>
                    Register <code>SomeBenchmark</code> under a <code>BenchmarkCategory</code> in <code>Benchmarking/Core/BenchmarkCategory.cs</code>.
                    Note that you may need to define an extra category.
                </li>
            </ol>
        </p>
    </section>

    <section class="indent">
        <h3>
            JavaScript Benchmarks
        </h3>
        <p>
            The source code of the JS benchmark executer can be found <a href="/Benchmarking/JavaScriptCore/BenchmarkRunner.js">here</a>.
            The way a JS benchmark should be defined is:
        </p>

        <p>
            <ol>
                <li>
                    Create a JavaScript class <code>SomeBenchmark</code>. Note that the class name should be the same
                    as the C# class name.
                </li>
                <li>
                    No need to override describing properties. The values from C# are dynamically injected wherever needed.
                </li>
                <li>
                    No need to define a <code>Parameters</code> array. The value from C# is dynamically injected wherever needed.
                </li>
                <li>
                    Define the <code>function Initialize(parameter)</code> function. The behavior should be the same as the C# equivalent.
                    This performance is not evaluated.
                </li>
                <li>
                    Define the <code>function Execute()</code> function. The behavior should be the same as the C# equivalent.
                    This performance is evaluated.
                </li>
                <li>
                    No need to register this class anywhere. It is dynamically injected wherever needed.
                </li>
            </ol>
        </p>
    </section>

    <section class="indent">
        <h3>
            Benchmark Plots
        </h3>
        <p>
            Each benchmark is executed a certain number of times for each parameter value. The mean execution times of these runs
            represent data points, while the standard deviations represent error bars.
        </p>
    </section>
</section>

<section>
    <h2 class="scroll-anchor" id="benchmarks">
        Benchmarks
    </h2>

    <div class="indent">
        <p>
            The benchmarks.
        </p>
        @foreach (var bc in BenchmarkCategory.All)
        {
            <BenchmarkCategoryVisualizer BenchmarkCategory="bc" Interactive="false" />
        }
    </div>
</section>

<section>
    <h2 class="scroll-anchor" id="un-vs-blazor-benchmarks">
        Uno Wasm Interpreted vs Blazor Wasm Interpreted
    </h2>

    <div class="indent">
        <p>
            How does Uno.Wasm.Bootstrap compare to Blazor? Blazor does not yet support AOT 
            and Blazor interpreted gives runtime memory errors for the full benchmarks. However,
            this section contains some limited benchmarks to compare Uno Wasm interpreted and
            Blazor Wasm interpreted.
        </p>
        @foreach (var bc in BenchmarkCategory.All)
        {
            <BenchmarkCategoryVisualizer BenchmarkCategory="bc" Interactive="false" />
        }
    </div>
</section>

<section id="static-content-helpers">
    <h2>
        Static Content Helpers
    </h2>

    <p>
        You can ignore this section. Just some helpers for creating the static website. 
    </p>

    <button onclick="copyHtml()">
        Copy HTML
    </button>
</section>

<script>
    var csRuntimeName = "@Program.CSharpRuntimeName";
    var csWasmAotName = "@Program.CSharpWasmAotName";
    var csWasmInterpretedName = "@Program.CSharpWasmInterpretedName";
    var jsName = "@Program.JavaScriptName";

    var dataFileUrls = [ @(Html.Raw(string.Join(", ", Directory.GetFiles(Program.BenchmarkingDataPath + "/", "*.*", SearchOption.AllDirectories).Select(f => $@"""{f.Replace("\\", "/").Replace(Program.RootPath, "")}""")))) ];

    async function plotData()
    {
        for (var dfu of dataFileUrls)
        {
            var url = encodeURI(dfu);
            url = url.replace(/#/g, '%23');

            var jsonData = await fetch(url).then(response => response.text());

            BenchmarkDataPlotter.plotBenchmarkCategoryDataFromJson(jsonData, getLegend(dfu));
        }
    }

    function getLegend(url)
    {
        url = url.replace(".json", "");
        var spaceIndex = url.indexOf(" ");

        return url.substring(spaceIndex);
    }

    function copyHtml()
    {
        var headTemp = document.createElement("head");
        headTemp.innerHTML = document.head.innerHTML.replaceAll('src="/', 'src="/@Program.CSharpWasmBenchmarkName/wwwroot/').replaceAll('href="/', 'href="/@Program.CSharpWasmBenchmarkName/wwwroot/');

        var mainTemp = document.createElement("main");
        mainTemp.innerHTML = document.querySelector("body > main").innerHTML;

        var plotlyElements = mainTemp.querySelectorAll(".js-plotly-plot");
        var staticContentHelperElement = mainTemp.querySelector("#static-content-helpers");

        for (var pe of plotlyElements)
        {
            pe.innerHTML = "";
        }

        staticContentHelperElement.innerHTML = "";

        var header =
        `
            <header>
                <nav class="hn-menu hn-top hn-fixed hn-shadow">
                    <input type="checkbox" name="hn-top-state" class="hn-input-state hn-input-state-nav hn-hide-desktop" id="hn-nav-cb">

                    <div class="hn-nav container-md p-0">
                        <div class="hn-section hn-section-brand">
                            <div class="hn-item">
                                <a id="hn-logo" class="hn-link" href="/">
                                    <span class="hn-content">
                                        <span class="acmion-logo" style="font-weight: 600;">
                                            CSharpWasmBenchmark
                                        </span>
                                    </span>
                                </a>
                            </div>

                            <div class="hn-spacer"></div>

                            <label class="hn-item hn-input hn-input-nav hn-hide-desktop" for="hn-nav-cb">
                                <span class="hn-link">
                                    <span class="hn-content">
                                        <span class="hn-input-active ">
                                            <i class="ri-close-line"></i>
                                        </span>
                                        <span class="hn-input-default">
                                            <i class="ri-menu-line"></i>
                                        </span>
                                    </span>
                                </span>
                            </label>

                        </div>
                        <div class="hn-section hn-section-body">
                            <div class="hn-spacer"></div>

                            <div class="hn-item">
                                <a class="hn-link" href="#home">
                                    <span class="hn-content">
                                        Home
                                    </span>
                                </a>
                            </div>
                            <div class="hn-item">
                                <a class="hn-link" href="#conclusions">
                                    <span class="hn-content">
                                        Conclusions
                                    </span>
                                </a>
                            </div>
                            <div class="hn-item">
                                <a class="hn-link" href="#credits">
                                    <span class="hn-content">
                                        Credits
                                    </span>
                                </a>
                            </div>
                            <div class="hn-item">
                                <a class="hn-link" href="#benchmarking-strategy">
                                    <span class="hn-content">
                                        Benchmarking Strategy
                                    </span>
                                </a>
                            </div>
                            <div class="hn-item">
                                <a class="hn-link" href="#benchmarks">
                                    <span class="hn-content">
                                        Benchmarks
                                    </span>
                                </a>
                            </div>
                            <div class="hn-item">
                                <a class="hn-link" href="https://github.com/Acmion/CSharpWasmBenchmark">
                                    <span class="hn-content">
                                        GitHub
                                    </span>
                                </a>
                            </div>
                        </div>
                    </div>

                    <label class="hn-overlay" for="hn-nav-cb">
                    </label>
                </nav>
            </header>

            <div class="scroll-anchor-height"></div>
        `;

        var textArea = document.createElement('textarea');
        textArea.innerHTML = `<!DOCTYPE html><html><head>${headTemp.innerHTML}</head><body>${header}<main class="container">${mainTemp.innerHTML}</main><div style="height: 200px"></div></body></html>`;
        navigator.clipboard.writeText(textArea.value);
    }

    plotData();
</script>

